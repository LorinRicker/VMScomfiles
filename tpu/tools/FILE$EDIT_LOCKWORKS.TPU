! FILE$EDIT_LOCKWORKS.TPU -- a PlugIn component for FILE$EDIT.COM

! Copyright © 1999-2016 by Lorin Ricker.  All rights reserved, with acceptance,
! use, modification and/or distribution permissions as granted and controlled
! by and under the GPL described herein.
!
! This program (software) is Free Software, licensed under the terms and
! conditions of the GNU General Public License Version 3 as published by
! the Free Software Foundation: http://www.gnu.org/copyleft/gpl.txt,
! which is hereby incorporated into this software and is a non-severable
! part thereof.  You have specific rights and obligations under this GPL
! which are binding if and when you accept, use, modify and/or distribute
! this software program (source code file) and/or derivatives thereof.
!

!     Version 1.1 - Fix "© E&R" at "19xx-2001", LW at "2002-20xx".     02/26/04
!     Version 1.0 - Base release.                                      06/12/02

! ABSTRACT:
! Changes proprietary/intellectual property/ownership of a source file
! from "E&R, Inc." to "LockWorks LLC", with initial copyright notice
! for the latter.
!
! If the file is a RAPT *.DEF resource definition file, then look for
! the /STATUS="..." and adjust it, too.


! === DCL LEXICALS (mimics) === !

CONSTANT
  NULL := "",  !null string

  ! OpCodes for CALL_USER:             ! Related arguments for CALL_USER:
  K$OpCode_EchoCheck     := 0,
  K$OpCode_Define_LNM    := 1,         KED$ExitLNM := "KED$EXIT_INFO",
  K$OpCode_Delete_LNM    := 2,
  K$OpCode_Check_ifQue   := 3,
  K$OpCode_Que_File      := 4,
  K$OpCode_Translate_LNM := 5,
  K$OpCode_Set_Symbol    := 6,
  K$OpCode_Get_Symbol    := 7,

  LIB$K_CLI_LOCAL_SYM    := 1,
  LIB$K_CLI_GLOBAL_SYM   := 2,

  ! Character constants:
  K$tab := ASCII(  9 ),  K$spc       := ASCII(  32 ),
  K$lf  := ASCII( 10 ),  K$dquote    := ASCII(  34 ),  !double quote "
  K$vt  := ASCII( 11 ),  K$squote    := ASCII(  39 ),  !single quote '
  K$ff  := ASCII( 12 ),  K$comma     := ASCII(  44 ),
  K$cr  := ASCII( 13 ),  K$period    := ASCII(  46 ),
  K$so  := ASCII( 14 ),  K$semicolon := ASCII(  59 ),
  K$si  := ASCII( 15 ),  K$csi       := ASCII( 155 ),
  K$esc := ASCII( 27 ),  K$ss3       := ASCII( 143 ),
                         K$pilcrow   := ASCII( 182 ),  !"¶"

  K$UPLETTERS  := "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
  K$LOLETTERS  := "abcdefghijklmnopqrstuvwxyz",
  K$LETTERS    := K$UPLETTERS + K$LOLETTERS,
  K$DIGITS     := "0123456789"
  ;  !End CONSTANTs


PROCEDURE F$Default( Arg, Op, PTyp, Def )
LOCAL rval;
  CASE SUBSTR( Op, 1, 1 ) FROM "<" TO "u"
    ["U",
     "u"]: IF ( GET_INFO( Arg, "TYPE" ) = UNSPECIFIED ) THEN rval := Def;
           ELSE rval := Arg; ENDIF;
    ["<"]: IF ( GET_INFO( Arg, "TYPE" ) <> PTyp ) THEN rval := Def;
           ELSE rval := Arg; ENDIF;
    ["="]: IF ( GET_INFO( Arg, "TYPE" ) = PTyp ) THEN rval := Arg;
           ELSE rval := Def; ENDIF;
    ENDCASE;
  RETURN( rval );
ENDPROCEDURE  !F$Default

PROCEDURE F$ELEMENT( n, Sep, Strg )
LOCAL i, j, E, S;
  i := -1;
  j := n;
  E := Sep;
  S := Strg + Sep;
  LOOP
    EXITIF ( j < 0 ) OR ( i = 0 );
    i := INDEX( S, Sep );
    IF ( i > 0 ) THEN
      j := j - 1;
      E := SUBSTR( S, 1, i - 1 );
      S := SUBSTR( S, i + 1, LENGTH( S ) - i );
    ENDIF;
    ENDLOOP;
  !distinguish NULL value from "no such element":
  IF ( i = 0 ) THEN E := Sep; ENDIF;
  RETURN( E );
ENDPROCEDURE  !F$ELEMENT

PROCEDURE F$TRNLNM( LNM, Tbl, Idx, MaxIdx )
LOCAL Table, Ndx, ArgStr, ResStr, EqvStr;
ON_ERROR
!  MESSAGE( "%F$TRNLNM-F-NOLOGNAME, no logical name match" );
!  MESSAGE( FAO( "  logical: `!AS'", LNM ) );
!  message( error_text + " at line " + str( error_line ) );
!  P$0; ABORT;
ENDON_ERROR
  ! Argument-String: "Logical¶Table¶Index"
  IF ( GET_INFO( Tbl, "TYPE" ) = STRING ) THEN
    Table := Tbl;
  ELSE Table := NULL;
  ENDIF;
  IF ( GET_INFO( Idx, "TYPE" ) = INTEGER ) THEN
    Ndx := Idx;
  ELSE Ndx := 0;
  ENDIF;
  ArgStr := LNM + K$pilcrow + Table + K$pilcrow + STR( Ndx );
  ResStr := CALL_USER( K$OpCode_Translate_LNM, ArgStr );
  ! Return-String: "EquivStr¶Logical¶TblFoundIn¶Index¶MaxIndex"
  EqvStr := F$ELEMENT( 0, K$pilcrow, ResStr );
  Lnm    := F$ELEMENT( 1, K$pilcrow, ResStr );
  Tbl    := F$ELEMENT( 2, K$pilcrow, ResStr );
  !Idx & MaxIdx are returned as strings...
  !  caller should convert to INT() only if needed
  Idx    := F$ELEMENT( 3, K$pilcrow, ResStr );
  MaxIdx := F$ELEMENT( 4, K$pilcrow, ResStr );
  RETURN( EqvStr );
ENDPROCEDURE  !F$TRNLNM

PROCEDURE F$TranslateLNM( LNM, DefVal; Table, Ndx )
LOCAL Val, Tmp, Tbl, Idx, MaxIdx;
ON_ERROR
ENDON_ERROR
  Tmp := LNM;   !If parameter LNM is "LiteralString", need this Tmp assignment!
  Tbl := F$Default( Table, "=", STRING, NULL );
  Idx := F$Default( Ndx,   "=", INTEGER, 0 );
  Val := F$TRNLNM( Tmp, Tbl, Idx, MaxIdx );
  IF ( Val = NULL ) THEN
    Val := DefVal;     !give back the default if the translation fails
  ENDIF;
  RETURN( Val );
ENDPROCEDURE  !F$TranslateLNM

PROCEDURE P$SETSYMBOL( Sym, Val; GLFlag )
LOCAL GLF, ArgStr, ResStr;
ON_ERROR
  MESSAGE( "%F$SETSYMBOL-F-SETFAIL, failed to set symbol" );
  MESSAGE( FAO( "  symbol: `!AS'", Sym ) );
  P$0; ABORT;
ENDON_ERROR
  IF ( LENGTH( Sym ) > 255 ) THEN
    MESSAGE( "%P$SETSYMBOL-E-SYMTOOLONG, length of symbol name exceeds 255 characters" );
    ABORT;
  ENDIF;
  IF ( LENGTH( Val ) > 255 ) THEN
    MESSAGE( "%P$SETSYMBOL-E-VALTOOLONG, symbol's value exceeds 255 characters" );
    ABORT;
  ENDIF;
  ! Argument-String: "Symbol¶Value¶GlobalLocalFlag"
  GLF := F$Default( GLFlag, "=", INTEGER, LIB$K_CLI_GLOBAL_SYM );
  ArgStr := Sym + K$pilcrow + Val + K$pilcrow + STR( GLF );
  ResStr := CALL_USER( K$OpCode_Set_Symbol, ArgStr );
ENDPROCEDURE  !P$SETSYMBOL

PROCEDURE F$GETSYMBOL( Sym, GLFlag )
LOCAL ArgStr, ResStr, Val;
ON_ERROR
  MESSAGE( "%F$GETSYMBOL-F-NOSUCHSYM, no such symbol" );
  MESSAGE( FAO( "  symbol: `!AS'", Sym ) );
  P$0; ABORT;
ENDON_ERROR
  IF ( LENGTH( Sym ) > 255 ) THEN
    MESSAGE( "%P$GETSYMBOL-E-SYMTOOLONG, length of symbol name exceeds 255 characters" );
    ABORT;
  ENDIF;
  ! Argument-String: "Symbol"
  ResStr := CALL_USER( K$OpCode_Get_Symbol, Sym );
  ! Result-String: "Value¶GlobalLocalFlag"
  ! (LIB$GET_SYMBOL returns table where if found symbol: Local or Global)
  Val    := F$ELEMENT( 0, K$pilcrow, ResStr );
  GLFlag := INT( F$ELEMENT( 1, K$pilcrow, ResStr ) );
  RETURN( Val );
ENDPROCEDURE  !F$GETSYMBOL


! Main program

  G$GLTable := 0;  !initialize...

  G$Debug := SUBSTR( F$TranslateLNM( "TOOLS$Debug", NULL ), 1, 1 );
  G$Debug := ( INDEX( "YT1", G$Debug ) > 0 );  !Yes, True or 1?
  G$Year  := F$GETSYMBOL( "FED$Year", G$GLTable );

  G$WS    := " " + ASCII(9);

  G$V1   := 0;
  G$V2   := 0;
  G$Rng1 := 0;
  G$Rng2 := 0;

  G$Bcom := NULL;  G$Ecom := NULL;  ! comment marks

  G$isER  := 0;
  G$Copy  := "Copyright © ";
  G$ER    := "Evans & Ricker, Inc.";
  G$LW    := "LockWorks LLC";
  G$byER  := " by " + G$ER;
  G$AllRR := "All rights reserved.";
  G$Tar1  := "This program is the confidential and proprietary product";
  G$Tar2  := " is strictly prohibited.";

  G$Pat1 := ( G$Copy + SPAN( K$DIGITS ) + G$byER + SPAN( K$spc ) + G$AllRR )
          | ( G$Copy + SPAN( K$DIGITS ) + "-" + SPAN( K$DIGITS )
              + G$byER + SPAN( K$spc ) + G$AllRR );
  G$Pat2 := SPAN( K$spc ) + SPAN( K$LETTERS );
  G$Pat3 := '/STAT' + SPAN( K$LETTERS + '=' ) + '"'
          + SPAN( K$LETTERS + K$DIGITS + ' &-_$/.,()' ) & " © ";

  G$Good1 := "This program is the confidential and proprietary product of LockWorks LLC.";
  G$Good2 := "Unauthorized use, reproduction or transfer of this program is prohibited.";

  ! LockWorks' year of incorporation is 2002, so all of its ©-notices should
  !  start then... add the current year to the range, too:
  G$IncYr := "2002-" + G$Year;
  G$Good3 := G$Copy + G$IncYr + " by " + G$LW + ".  " + G$AllRR;
  G$Good4 := G$IncYr + K$spc + G$LW + '"';

  G$IFile := GET_INFO( COMMAND_LINE, "FILE_NAME" );
  Source_Buffer := CREATE_BUFFER( "Source", G$IFile );
  G$isDEF := F$GETSYMBOL( "FED$isDEF", G$GLTable );

  POSITION( BEGINNING_OF( Source_Buffer ) );

  ! Test if this is indeed an E&R copyright notice:
  G$Rng := SEARCH_QUIETLY( G$Tar1, FORWARD, EXACT );      ! 1st line
  IF ( G$Rng <> 0 ) THEN
    POSITION( BEGINNING_OF( G$Rng ) );
    POSITION( LINE_BEGIN );
    G$M1 := MARK( NONE );
    MOVE_VERTICAL( +1 );                                  ! 2nd line
    IF ( INDEX( CURRENT_LINE, G$ER ) > 0 ) THEN
      MOVE_VERTICAL( +1 );                                ! 3rd line
      IF ( INDEX( CURRENT_LINE, G$Tar2 ) > 0 ) THEN
        ! Found a valid E&R copyright paragraph (3 lines) -- delete & replace:
        POSITION( G$M1 );

        ! ...but first determine type of comment-char(s):
        G$Rng2 := SEARCH_QUIETLY( G$Pat2, FORWARD, NO_EXACT );
        IF ( G$Rng2 <> 0 ) THEN
          POSITION( BEGINNING_OF( G$Rng2 ) );
          G$M2 := MARK( NONE );
          G$Rng := CREATE_RANGE( G$M1, G$M2, NONE );
          G$Bcom := SUBSTR( G$Rng, 1, LENGTH( G$Rng ) );
          ! Pad a space, if needed:
          IF ( SUBSTR( G$Bcom, LENGTH( G$Bcom ), 1 ) <> K$spc ) THEN
            G$Bcom := G$Bcom + K$spc;
          ENDIF;
          IF ( G$Bcom = "{ "  ) THEN G$Ecom := " }";  ENDIF; ! Pascal
          IF ( G$Bcom = "/* " ) THEN G$Ecom := " */"; ENDIF; ! C
          ! DCL, TPU, SQL, etc. don't use a closing comment mark...
        ENDIF;

        ! Delete E&R paragraph & replace with LockWorks:
        POSITION( G$M1 );
        G$Good1 := G$Bcom + G$Good1;
        G$Good2 := G$Bcom + G$Good2;
        IF ( INDEX( CURRENT_LINE, G$Ecom ) > 0 ) THEN
          G$Good1 := G$Good1 + G$Ecom;
          G$Good2 := G$Good2 + G$Ecom;
        ENDIF;
        ERASE_LINE;                                       ! 3 lines...
        ERASE_LINE;
        ERASE_LINE;
        COPY_TEXT( G$Good1 ); SPLIT_LINE;                 ! replace with 2 lines
        COPY_TEXT( G$Good2 ); SPLIT_LINE;

        ! Add a LW copyright line before the existing E&R copyright line,
        !   retaining the E&R copyright line for history, and fixing its
        !   end-point at 2001.
        ! LockWorks LLC was formed in 2002, so this seed-line is a "constant",
        !   ready for future update by the COPYRIGHT plug-in; but we can also
        !   now fix its range from 2002-20xx, since 2002 is done gone.
        G$Rng := SEARCH_QUIETLY( G$Pat1, FORWARD, EXACT );
        IF ( G$Rng <> 0 ) THEN
          POSITION( BEGINNING_OF( G$Rng ) );
          POSITION( LINE_BEGIN ); MOVE_HORIZONTAL( -1 );
          G$Pat2 := G$Bcom + ( SPAN( K$spc )@G$V2 ) + G$Copy;
          G$Rng2 := SEARCH_QUIETLY( G$Pat2, FORWARD, NO_EXACT );
          IF ( G$Rng2 <> 0 ) THEN ERASE( G$V2 ); ENDIF;
          POSITION( BEGINNING_OF( G$Rng ) );
          POSITION( LINE_BEGIN );
          T0 := G$Bcom + G$Good3;
          IF ( INDEX( CURRENT_LINE, G$Ecom ) > 0 ) THEN
            T0 := T0 + G$Ecom;
          ENDIF;
          COPY_TEXT( T0 ); SPLIT_LINE;
          ! Fix the final year of the "Evans & Ricker, Inc." line
          POSITION( BEGINNING_OF( G$Rng ) );
          IDash := INDEX( SUBSTR( G$Rng, 1, LENGTH( G$Rng ) ), "-" );
          IF ( IDash > 0 ) THEN  ! 
            ! change "19xx-xxxx" into "19xx-2001"
            MOVE_HORIZONTAL( IDash );
            ERASE_CHARACTER( 4 );
            COPY_TEXT( "2001" );
          ELSE  ! change "19xx" into "19xx-2001"
            MOVE_HORIZONTAL( LENGTH( G$Copy ) + 4 );
            COPY_TEXT( "-2001" );
          ENDIF;
        ENDIF;

        ! If this is a RAPT *.DEF file, then find and adjust
        ! the SCREEN's /STATUS="..." qualifier:
        IF ( G$isDEF = "YES" ) THEN
          G$Rng := SEARCH_QUIETLY( G$Pat3, FORWARD, NO_EXACT );
          IF ( G$Rng <> 0 ) THEN
            POSITION( END_OF( G$Rng ) );
            MOVE_HORIZONTAL( +1 );
            G$M1 := MARK( NONE );
            G$Rng := SEARCH_QUIETLY( '"', FORWARD, NO_EXACT );
            IF ( G$Rng <> 0 ) THEN
              G$Rng2 := CREATE_RANGE( G$M1, BEGINNING_OF( G$Rng ), NONE );
              ERASE( G$Rng2 );
              COPY_TEXT( G$Good4 );
            ENDIF;
          ELSE MESSAGE( "Failed to fix /STATUS line..." );
          ENDIF;
        ENDIF;

      ENDIF;
    ENDIF;
  ENDIF;

  IF GET_INFO( Source_Buffer, "MODIFIED" ) THEN
    WRITE_FILE( Source_Buffer );
    P$SETSYMBOL( "FED$Modified", "TRUE" );
    EXIT;
  ELSE
    P$SETSYMBOL( "FED$Modified", "FALSE" );
    QUIT;
  ENDIF;
