! FILE$EDIT_BACKGROUND.TPU -- a PlugIn component for FILE$EDIT.COM

! Copyright © 1999-2016 by Lorin Ricker.  All rights reserved, with acceptance,
! use, modification and/or distribution permissions as granted and controlled
! by and under the GPL described herein.
!
! This program (software) is Free Software, licensed under the terms and
! conditions of the GNU General Public License Version 3 as published by
! the Free Software Foundation: http://www.gnu.org/copyleft/gpl.txt,
! which is hereby incorporated into this software and is a non-severable
! part thereof.  You have specific rights and obligations under this GPL
! which are binding if and when you accept, use, modify and/or distribute
! this software program (source code file) and/or derivatives thereof.
!

!     Version 1.0 - Base release.                             05/04/2001

! ABSTRACT:
!  Create BACKGROUND /GUI statements for RAPT *.DEF files by processing
!  the TUI background text section of a SCREEN-EOSCREEN statement block.
!
!  The purpose of this tool is to perform 1st-order "bulk editing" which
!  generates BACKGROUND /GUI statements directly from the TUI background
!  layout.
!
!  This filter-tool *can* be run more than once on a *.DEF file... the
!  first time it is used, it generates a BACKGROUND /GUI statement for
!  each unique label found in the TUI background text.  Subsequent runs
!  will find any *new* label (by searching for a `BACKGROUND "label" '
!  statement prior to generating a new one) and generate a statement for
!  the new label(s) only.  Note: Fixes/adjustments to label position and
!  deletions of labels are *not* detected or handled.
!
!  Because of layout differences between TUI's fixed-space font and the
!  proportional (Arial) font used in the GUI/LTClient, the label for any
!  BACKGROUND /GUI statement is right-justified by default, so most of
!  the generated statements will be positioned correctly within a label
!  "field" positioned on the TUI-label's start-column spot.
!
!  The /JUST=LEFT attribute is applied to BACKGROUND /GUI statements as
!  follows:
!
!     1. Any label which contains (ends with) a ":", e.g. "Remarks:"
!     2. Any label with is surrounded by "()", e.g. "(last name)"
!     3. Any label which is preceded by a TUI "poor-man's check-box"
!        "( )", e.g. "( ) Are you presently on medication?"
!
!  The function F$WeirdCases() attempts to handle a few situations where
!  a TUI background tries to mimic a GUI-environment's check-box controls
!  with a "( )" notation... these are just stripped from the BACKGROUND /GUI
!  statements; however, these also give a generation-hint for /JUST=LEFT
!  qualifiers, so these lines are generally well-formed (see above).
!
!  Other anomalous situations may arise, and currently must be manually
!  edited, evaluated and fixed as necessary.


! === DCL LEXICALS (mimics) === !

CONSTANT
  NULL := "",  !null string

  ! OpCodes for CALL_USER:             ! Related arguments for CALL_USER:
  K$OpCode_EchoCheck     := 0,
  K$OpCode_Define_LNM    := 1,         KED$ExitLNM := "KED$EXIT_INFO",
  K$OpCode_Delete_LNM    := 2,
  K$OpCode_Check_ifQue   := 3,
  K$OpCode_Que_File      := 4,
  K$OpCode_Translate_LNM := 5,
  K$OpCode_Set_Symbol    := 6,
  K$OpCode_Get_Symbol    := 7,

  LIB$K_CLI_LOCAL_SYM    := 1,
  LIB$K_CLI_GLOBAL_SYM   := 2,

  ! Character constants:
  K$tab := ASCII(  9 ),  K$spc       := ASCII(  32 ),
  K$lf  := ASCII( 10 ),  K$dquote    := ASCII(  34 ),  !double quote "
  K$vt  := ASCII( 11 ),  K$squote    := ASCII(  39 ),  !single quote '
  K$ff  := ASCII( 12 ),  K$comma     := ASCII(  44 ),
  K$cr  := ASCII( 13 ),  K$period    := ASCII(  46 ),
  K$so  := ASCII( 14 ),  K$semicolon := ASCII(  59 ),
  K$si  := ASCII( 15 ),  K$csi       := ASCII( 155 ),
  K$esc := ASCII( 27 ),  K$ss3       := ASCII( 143 ),
                         K$pilcrow   := ASCII( 182 ),  !"¶"
  K$Spaces := K$spc * 128
  ;  !End CONSTANTs


PROCEDURE F$Default( Arg, Op, PTyp, Def )
LOCAL rval;
  CASE SUBSTR( Op, 1, 1 ) FROM "<" TO "u"
    ["U",
     "u"]: IF ( GET_INFO( Arg, "TYPE" ) = UNSPECIFIED ) THEN rval := Def;
           ELSE rval := Arg; ENDIF;
    ["<"]: IF ( GET_INFO( Arg, "TYPE" ) <> PTyp ) THEN rval := Def;
           ELSE rval := Arg; ENDIF;
    ["="]: IF ( GET_INFO( Arg, "TYPE" ) = PTyp ) THEN rval := Arg;
           ELSE rval := Def; ENDIF;
    ENDCASE;
  RETURN( rval );
ENDPROCEDURE  !F$Default

PROCEDURE F$ELEMENT( n, Sep, Strg )
LOCAL i, j, E, S;
  i := -1;
  j := n;
  E := Sep;
  S := Strg + Sep;
  LOOP
    EXITIF ( j < 0 ) OR ( i = 0 );
    i := INDEX( S, Sep );
    IF ( i > 0 ) THEN
      j := j - 1;
      E := SUBSTR( S, 1, i - 1 );
      S := SUBSTR( S, i + 1, LENGTH( S ) - i );
    ENDIF;
    ENDLOOP;
  !distinguish NULL value from "no such element":
  IF ( i = 0 ) THEN E := Sep; ENDIF;
  RETURN( E );
ENDPROCEDURE  !F$ELEMENT

PROCEDURE F$TRNLNM( LNM, Tbl, Idx, MaxIdx )
LOCAL Table, Ndx, ArgStr, ResStr, EqvStr;
ON_ERROR
!  MESSAGE( "%F$TRNLNM-F-NOLOGNAME, no logical name match" );
!  MESSAGE( FAO( "  logical: `!AS'", LNM ) );
!  message( error_text + " at line " + str( error_line ) );
!  P$0; ABORT;
ENDON_ERROR
  ! Argument-String: "Logical¶Table¶Index"
  IF ( GET_INFO( Tbl, "TYPE" ) = STRING ) THEN
    Table := Tbl;
  ELSE Table := NULL;
  ENDIF;
  IF ( GET_INFO( Idx, "TYPE" ) = INTEGER ) THEN
    Ndx := Idx;
  ELSE Ndx := 0;
  ENDIF;
  ArgStr := LNM + K$pilcrow + Table + K$pilcrow + STR( Ndx );
  ResStr := CALL_USER( K$OpCode_Translate_LNM, ArgStr );
  ! Return-String: "EquivStr¶Logical¶TblFoundIn¶Index¶MaxIndex"
  EqvStr := F$ELEMENT( 0, K$pilcrow, ResStr );
  Lnm    := F$ELEMENT( 1, K$pilcrow, ResStr );
  Tbl    := F$ELEMENT( 2, K$pilcrow, ResStr );
  !Idx & MaxIdx are returned as strings...
  !  caller should convert to INT() only if needed
  Idx    := F$ELEMENT( 3, K$pilcrow, ResStr );
  MaxIdx := F$ELEMENT( 4, K$pilcrow, ResStr );
  RETURN( EqvStr );
ENDPROCEDURE  !F$TRNLNM

PROCEDURE F$TranslateLNM( LNM, DefVal; Table, Ndx )
LOCAL Val, Tmp, Tbl, Idx, MaxIdx;
ON_ERROR
ENDON_ERROR
  Tmp := LNM;   !If parameter LNM is "LiteralString", need this Tmp assignment!
  Tbl := F$Default( Table, "=", STRING, NULL );
  Idx := F$Default( Ndx,   "=", INTEGER, 0 );
  Val := F$TRNLNM( Tmp, Tbl, Idx, MaxIdx );
  IF ( Val = NULL ) THEN
    Val := DefVal;     !give back the default if the translation fails
  ENDIF;
  RETURN( Val );
ENDPROCEDURE  !F$TranslateLNM

PROCEDURE P$SETSYMBOL( Sym, Val; GLFlag )
LOCAL GLF, ArgStr, ResStr;
ON_ERROR
  MESSAGE( "%F$SETSYMBOL-F-SETFAIL, failed to set symbol" );
  MESSAGE( FAO( "  symbol: `!AS'", Sym ) );
  P$0; ABORT;
ENDON_ERROR
  IF ( LENGTH( Sym ) > 255 ) THEN
    MESSAGE( "%P$SETSYMBOL-E-SYMTOOLONG, length of symbol name exceeds 255 characters" );
    ABORT;
  ENDIF;
  IF ( LENGTH( Val ) > 255 ) THEN
    MESSAGE( "%P$SETSYMBOL-E-VALTOOLONG, symbol's value exceeds 255 characters" );
    ABORT;
  ENDIF;
  ! Argument-String: "Symbol¶Value¶GlobalLocalFlag"
  GLF := F$Default( GLFlag, "=", INTEGER, LIB$K_CLI_GLOBAL_SYM );
  ArgStr := Sym + K$pilcrow + Val + K$pilcrow + STR( GLF );
  ResStr := CALL_USER( K$OpCode_Set_Symbol, ArgStr );
ENDPROCEDURE  !P$SETSYMBOL

PROCEDURE F$GETSYMBOL( Sym, GLFlag )
LOCAL ArgStr, ResStr, Val;
ON_ERROR
  MESSAGE( "%F$GETSYMBOL-F-NOSUCHSYM, no such symbol" );
  MESSAGE( FAO( "  symbol: `!AS'", Sym ) );
  P$0; ABORT;
ENDON_ERROR
  IF ( LENGTH( Sym ) > 255 ) THEN
    MESSAGE( "%P$GETSYMBOL-E-SYMTOOLONG, length of symbol name exceeds 255 characters" );
    ABORT;
  ENDIF;
  ! Argument-String: "Symbol"
  ResStr := CALL_USER( K$OpCode_Get_Symbol, Sym );
  ! Result-String: "Value¶GlobalLocalFlag"
  ! (LIB$GET_SYMBOL returns table where if found symbol: Local or Global)
  Val    := F$ELEMENT( 0, K$pilcrow, ResStr );
  GLFlag := INT( F$ELEMENT( 1, K$pilcrow, ResStr ) );
  RETURN( Val );
ENDPROCEDURE  !F$GETSYMBOL


PROCEDURE F$AdvLine( P )
LOCAL X;
  IF ( P <> 0 ) THEN POSITION( P ); ENDIF;
  MOVE_VERTICAL( +1 );
  POSITION( LINE_BEGIN );
  X := MARK( NONE );
  RETURN( X );
ENDPROCEDURE  !F$AdvLine

PROCEDURE P$Extract( L, Pos, C )
LOCAL Txt, Len, S, E;
  Txt := NULL;
  S   := 0;
  E   := 0;
  Len := LENGTH( L );
  IF ( Len > 0 ) THEN
    LOOP  ! to find the start of a label...
      IF ( SUBSTR( L, C, 1 ) <> K$spc ) OR ( C >= Len ) THEN
        S := C;
        EXITIF ( TRUE );
      ELSE C := C + 1;
      ENDIF;
      ENDLOOP;
    LOOP  ! to find the end of a label (2 consecutive spaces or EOL)...
      IF ( C <= Len-2 ) THEN
        IF ( SUBSTR( L, C+1, 1 ) = K$spc )
        AND ( SUBSTR( L, C+2, 1 ) = K$spc ) THEN
          E := C;
        ENDIF;
      ENDIF;
      IF ( C >= Len ) THEN
        E := Len;
      ENDIF;
      EXITIF ( E > 0 );
      C := C + 1;
      ENDLOOP;
    IF ( S > 0 ) AND ( E > 0 ) AND ( S <= E ) THEN
      Txt  := SUBSTR( L, S, E-S+1 ); !the label
      Pos  := S;                     ! and its start-position;
      C    := E + 1;                 !restart here for more labels this line...
    ENDIF;
  ENDIF;
  IF G$Debug AND ( Txt <> NULL ) THEN
    MESSAGE( FAO( '%BACKGROUND-I-EXTRACT, start:!SL end:!SL, label "!AS"', S, E, Txt ) );
  ENDIF;
  RETURN( Txt );
ENDPROCEDURE  !P$Extract

PROCEDURE F$WeirdCases( Txt, Pos )
  ! Handle some weird TUI cases which try to imitate a GUI's check-box...
  ! just remove such text from BACKGROUND /GUI labelling:
  !   a. "( )"
  !   b. "( ) Check-box"   -- one space after "( )";
  !                        -- two spaces after "( )" just yields a. above
  IF ( Txt = "( )" ) THEN
    G$LJustNext := TRUE;  ! left-justify the *next* label
    RETURN( NULL );
  ENDIF;   !...just ignore this one
  IF ( INDEX( Txt, "( ) " ) = 1 ) THEN    ! one space after the "( )"
    Pos := Pos + 4;
    G$LJust := TRUE;     ! left-justify *this* label
    RETURN( SUBSTR( Txt, 5, LENGTH( Txt )-4 ) );
  ENDIF;
  ! Else... return the label unchanged:
  RETURN( Txt );
ENDPROCEDURE  !F$WeirdCases

PROCEDURE F$UniqueStatement( Pat )
LOCAL Here, P, Tar, Uni;
  Here := MARK( NONE );
  POSITION( G$Scr );
  P := LINE_BEGIN + Pat;
  Tar := SEARCH_QUIETLY( P, FORWARD, EXACT );
  Uni := ( Tar = 0 );
  !! IF G$Debug THEN
  !!   IF Uni THEN
  !!     MESSAGE( '%BACKGROUND-I-UNIQUE, "' + Pat + '" is unique' );
  !!   ELSE MESSAGE( '%BACKGROUND-I-DUPLICATE, a previous "' + Pat + '" statement exists' );
  !!   ENDIF;
  !! ENDIF;
  POSITION( Here );
  RETURN( Uni );  ! TRUE if a previously-existing instance of *this* particular
                  !  `BACKGROUND "label" ' statement is *not* found
ENDPROCEDURE  !F$UniqueStatement

PROCEDURE F$BackGUI( LabelText, RowC, ColC, TabStop, Pat )
LOCAL T0;
  !...save Pat to search for unique/duplicate BACKGROUND statements:
  Pat := 'BACKGROUND "' + LabelText + '" ';
  T0  := Pat + SUBSTR( K$Spaces, 1, TabStop - LENGTH(Pat) )
       + FAO( "/POS=(!2SL,!2SL)", RowC, ColC ) + " /GUI";
  RETURN( T0 );
ENDPROCEDURE  !F$BackGUI


! Main program

  G$Debug := SUBSTR( F$TranslateLNM( "TOOLS$Debug", NULL ), 1, 1 );
  G$Debug := ( INDEX( "YT1", G$Debug ) > 0 );  !Yes, True or 1?

  G$IFile := GET_INFO( COMMAND_LINE, "FILE_NAME" );
  Source_Buffer := CREATE_BUFFER( "Source", G$IFile );

  ! 1. Find SCREEN, advance through all "-"continuation lines to find
  !    first line of TUI's background text:
  POSITION( BEGINNING_OF( Source_Buffer ) );
  G$Pat := LINE_BEGIN + "SCREEN ";        ! start of SCREEN statement
  G$Scr := SEARCH_QUIETLY( G$Pat, FORWARD, NO_EXACT );

  IF ( G$Scr <> 0 ) THEN
    POSITION( G$Scr );
    G$LC := 0;
    LOOP
      G$L := CURRENT_LINE;
      ! All SCREEN continuation lines have either a line-continuation
      !  mark "-" (or ",-") and/or CLI-syntax including an "=" :
      G$I := INDEX( G$L, " -" ) + INDEX( G$L, ",-" ) + INDEX( G$L, "=" );
      EXITIF ( G$I = 0 );
      ! Skip SCREEN continuation lines until the first TUI background line...
      G$Scr := F$AdvLine( 0 );
      G$LC  := G$LC + 1;
      ENDLOOP;
    ! Now at start of TUI's background text...
    G$RowC := 0;

    ! 2. Find EOSCREEN, advance 1 line, mark here for adding BACKGROUND stmts:
    G$Pat := LINE_BEGIN + "EOS";          ! "EOSCREEN"
    G$EOS := SEARCH_QUIETLY( G$Pat, FORWARD, NO_EXACT );
    IF ( G$EOS <> 0 ) THEN
      G$BckgrPos := F$AdvLine( G$EOS );
    ENDIF;

    ! 3. Digest each line of TUI background (up to EOSCREEN stmt.), pick out
    !    each label-text, create a BACKGROUND /GUI statement for each:
    POSITION( G$Scr );
    G$LC   := 0;
    G$ColC := 0;
    G$TabStop := 52;  ! put the "/POS=(,) /GUI" here...
    LOOP
      G$L := EDIT( CURRENT_LINE, TRIM_TRAILING, OFF, NOT_IN_PLACE );
      EXITIF ( SUBSTR( G$L, 1, 3 ) = "EOS" );  ! EOSCREEN?
      ! Pick out background label text(s), make BACKGROUND /GUI statement(s):
      G$RowC := G$RowC + 1;
      G$Scan := 1;
      G$LJustNext := FALSE;
      IF G$Debug THEN
        MESSAGE( FAO( '%BACKGROUND-I-ROW#!SL, "!AS"', G$RowC, G$L ) );
      ENDIF;
      LOOP
        G$Label := P$Extract( G$L, G$ColC, G$Scan );
        EXITIF ( G$Label = NULL );
        ! Got a label, so make a BACKGROUND statement...
        IF ( INDEX( G$Label, "(" ) = 1 ) THEN
          G$Label := F$WeirdCases( G$Label, G$ColC );
        ELSE G$LJust := FALSE;
        ENDIF;
        IF ( G$Label <> NULL ) THEN
          G$Statement := F$BackGUI( G$Label, G$RowC, G$ColC, G$TabStop,
                                    G$Pat );  ! G$Pat = `BACKGROUND "label" '
          ! Check & avoid creating duplicate statements:
          IF F$UniqueStatement( G$Pat ) THEN
            POSITION( G$BckgrPos );
            IF ( G$LC = 0 ) THEN SPLIT_LINE; ENDIF;  ! the initial blank-line
            IF NOT( G$LJust ) THEN
              G$Len := LENGTH( G$Label );
              G$LJust := ( INDEX( G$Label, ":" ) = G$Len )
                         OR ( ( INDEX( G$Label, "(" ) = 1 )
                              AND ( INDEX( G$Label, ")" ) = G$Len ) )
                         OR G$LJustNext;
            ENDIF;
            !! IF G$Debug THEN
            !!   MESSAGE( FAO( "%BACKGROUND-I-JUST, /JUSTIFY=LEFT:!SL", G$LJust ) );
            !! ENDIF;
            IF G$LJust THEN
              G$Statement := G$Statement + " /JUST=LEFT";
            ENDIF;
            IF G$Debug THEN
              MESSAGE( FAO( "%BACKGROUND-I-STATEMENT, !AS", G$Statement ) );
            ENDIF;
            COPY_TEXT( G$Statement );
            SPLIT_LINE;
            G$LC := G$LC + 1;
            G$LJustNext := FALSE;
          ENDIF;
        ENDIF;
        ENDLOOP;
      ! Reposition for next line of TUI background...
      G$Scr := F$AdvLine( G$Scr );
      ENDLOOP;

  ENDIF;  ! ...search for "SCREEN "

  IF GET_INFO( Source_Buffer, "MODIFIED" ) THEN
    IF G$Debug THEN
      MESSAGE( FAO( "%BACKGROUND-S-COUNT, generated !SL BACKGROUND statements", G$LC ) );
    ENDIF;
    WRITE_FILE( Source_Buffer );
    P$SETSYMBOL( "FED$Modified", "TRUE" );
    EXIT;
  ELSE
    P$SETSYMBOL( "FED$Modified", "FALSE" );
    MESSAGE( "%BACKGROUND-I-NO_LABELS, no BACKGROUND statements generated" );
    QUIT;
  ENDIF;
