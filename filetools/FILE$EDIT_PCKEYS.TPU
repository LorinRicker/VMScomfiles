! FILE$EDIT_PCKEYS.TPU -- a PlugIn component for FILE$EDIT.COM

! Copyright © 1999-2017 by Lorin Ricker.  All rights reserved, with acceptance,
! use, modification and/or distribution permissions as granted and controlled
! by and under the GPL described herein.
!
! This program (software) is Free Software, licensed under the terms and
! conditions of the GNU General Public License Version 3 as published by
! the Free Software Foundation: http://www.gnu.org/copyleft/gpl.txt,
! which is hereby incorporated into this software and is a non-severable
! part thereof.  You have specific rights and obligations under this GPL
! which are binding if and when you accept, use, modify and/or distribute
! this software program (source code file) and/or derivatives thereof.

!     Version 1.3 - Fix replacement of FIND, SELECT, REMOVE    02/05/2002
!                   & INSERT keystrokes.
!     Version 1.2 - Correct key mapping for VT's F11 thru F14  08/06/2001
!                   mapped to PC's F5 thru F8.
!     Version 1.1 - Fix/improve `OPTIONS/KEYSTROKE=PC'         12/28/2000
!                   insertion handling, use success to
!                   control subsequent conversion.
!                   Also improve sensitivity/handling of
!                   KEYSTROKE conversions, esp. to avoid
!                   changing /ACTION=code values which
!                   happen to have same names as key-names.
!     Version 1.0 - Base release.                              08/30/2000

! ABSTRACT:
! Converts keystroke definitions in a RAPT *.DEF file from
!  old VT-style to new PC-style, according to the following
!  name-mapping, corresponding to the CLI-syntax type LGTYPE
!  in [RMG060]RMG$CLD.CLD:
!
!           VT (old)    PC (new)
!                F11 =>  F5      ...for Legends, Navigation and Keystrokes
!                F12 =>  F6
!                F13 =>  F7
!                F14 =>  F8
!         (Help) F15 =>  -- (no mapping)
!           (Do) F16 =>  -- (no mapping)
!                F17 =>  F9
!                F18 => F10
!                F19 => F11
!                F20 => F12
!           PREVIOUS => PGUP
!               NEXT => PGDN
!
!               FIND => HOME     ...for Keystrokes only (not /ACTION=code,
!             SELECT => END         which do have names which coincide with
!             REMOVE => DELETE      keynames)
!             INSERT => INSERT


! === DCL LEXICALS (mimics) === !

CONSTANT
  NULL := "",  !null string

  ! OpCodes for CALL_USER:             ! Related arguments for CALL_USER:
  K$OpCode_EchoCheck     := 0,
  K$OpCode_Define_LNM    := 1,         KED$ExitLNM := "KED$EXIT_INFO",
  K$OpCode_Delete_LNM    := 2,
  K$OpCode_Check_ifQue   := 3,
  K$OpCode_Que_File      := 4,
  K$OpCode_Translate_LNM := 5,
  K$OpCode_Set_Symbol    := 6,
  K$OpCode_Get_Symbol    := 7,

  LIB$K_CLI_LOCAL_SYM    := 1,
  LIB$K_CLI_GLOBAL_SYM   := 2,

  ! Character constants:
  K$tab := ASCII(  9 ),  K$spc       := ASCII(  32 ),
  K$lf  := ASCII( 10 ),  K$dquote    := ASCII(  34 ),  !double quote "
  K$vt  := ASCII( 11 ),  K$squote    := ASCII(  39 ),  !single quote '
  K$ff  := ASCII( 12 ),  K$comma     := ASCII(  44 ),
  K$cr  := ASCII( 13 ),  K$period    := ASCII(  46 ),
  K$so  := ASCII( 14 ),  K$semicolon := ASCII(  59 ),
  K$si  := ASCII( 15 ),  K$csi       := ASCII( 155 ),
  K$esc := ASCII( 27 ),  K$ss3       := ASCII( 143 ),
                         K$pilcrow   := ASCII( 182 )   !"¶"
  ;  !End CONSTANTs


PROCEDURE F$Default( Arg, Op, PTyp, Def )
LOCAL rval;
  CASE SUBSTR( Op, 1, 1 ) FROM "<" TO "u"
    ["U",
     "u"]: IF ( GET_INFO( Arg, "TYPE" ) = UNSPECIFIED ) THEN rval := Def;
           ELSE rval := Arg; ENDIF;
    ["<"]: IF ( GET_INFO( Arg, "TYPE" ) <> PTyp ) THEN rval := Def;
           ELSE rval := Arg; ENDIF;
    ["="]: IF ( GET_INFO( Arg, "TYPE" ) = PTyp ) THEN rval := Arg;
           ELSE rval := Def; ENDIF;
    ENDCASE;
  RETURN( rval );
ENDPROCEDURE  !F$Default

PROCEDURE F$ELEMENT( n, Sep, Strg )
LOCAL i, j, E, S;
  i := -1;
  j := n;
  E := Sep;
  S := Strg + Sep;
  LOOP
    EXITIF ( j < 0 ) OR ( i = 0 );
    i := INDEX( S, Sep );
    IF ( i > 0 ) THEN
      j := j - 1;
      E := SUBSTR( S, 1, i - 1 );
      S := SUBSTR( S, i + 1, LENGTH( S ) - i );
    ENDIF;
    ENDLOOP;
  !distinguish NULL value from "no such element":
  IF ( i = 0 ) THEN E := Sep; ENDIF;
  RETURN( E );
ENDPROCEDURE  !F$ELEMENT

PROCEDURE F$TRNLNM( LNM, Tbl, Idx, MaxIdx )
LOCAL Table, Ndx, ArgStr, ResStr, EqvStr;
ON_ERROR
!  MESSAGE( "%F$TRNLNM-F-NOLOGNAME, no logical name match" );
!  MESSAGE( FAO( "  logical: `!AS'", LNM ) );
!  message( error_text + " at line " + str( error_line ) );
!  P$0; ABORT;
ENDON_ERROR
  ! Argument-String: "Logical¶Table¶Index"
  IF ( GET_INFO( Tbl, "TYPE" ) = STRING ) THEN
    Table := Tbl;
  ELSE Table := NULL;
  ENDIF;
  IF ( GET_INFO( Idx, "TYPE" ) = INTEGER ) THEN
    Ndx := Idx;
  ELSE Ndx := 0;
  ENDIF;
  ArgStr := LNM + K$pilcrow + Table + K$pilcrow + STR( Ndx );
  ResStr := CALL_USER( K$OpCode_Translate_LNM, ArgStr );
  ! Return-String: "EquivStr¶Logical¶TblFoundIn¶Index¶MaxIndex"
  EqvStr := F$ELEMENT( 0, K$pilcrow, ResStr );
  Lnm    := F$ELEMENT( 1, K$pilcrow, ResStr );
  Tbl    := F$ELEMENT( 2, K$pilcrow, ResStr );
  !Idx & MaxIdx are returned as strings...
  !  caller should convert to INT() only if needed
  Idx    := F$ELEMENT( 3, K$pilcrow, ResStr );
  MaxIdx := F$ELEMENT( 4, K$pilcrow, ResStr );
  RETURN( EqvStr );
ENDPROCEDURE  !F$TRNLNM

PROCEDURE F$TranslateLNM( LNM, DefVal; Table, Ndx )
LOCAL Val, Tmp, Tbl, Idx, MaxIdx;
ON_ERROR
ENDON_ERROR
  Tmp := LNM;   !If parameter LNM is "LiteralString", need this Tmp assignment!
  Tbl := F$Default( Table, "=", STRING, NULL );
  Idx := F$Default( Ndx,   "=", INTEGER, 0 );
  Val := F$TRNLNM( Tmp, Tbl, Idx, MaxIdx );
  IF ( Val = NULL ) THEN
    Val := DefVal;     !give back the default if the translation fails
  ENDIF;
  RETURN( Val );
ENDPROCEDURE  !F$TranslateLNM

PROCEDURE P$SETSYMBOL( Sym, Val; GLFlag )
LOCAL GLF, ArgStr, ResStr;
ON_ERROR
  MESSAGE( "%F$SETSYMBOL-F-SETFAIL, failed to set symbol" );
  MESSAGE( FAO( "  symbol: `!AS'", Sym ) );
  P$0; ABORT;
ENDON_ERROR
  IF ( LENGTH( Sym ) > 255 ) THEN
    MESSAGE( "%P$SETSYMBOL-E-SYMTOOLONG, length of symbol name exceeds 255 characters" );
    ABORT;
  ENDIF;
  IF ( LENGTH( Val ) > 255 ) THEN
    MESSAGE( "%P$SETSYMBOL-E-VALTOOLONG, symbol's value exceeds 255 characters" );
    ABORT;
  ENDIF;
  ! Argument-String: "Symbol¶Value¶GlobalLocalFlag"
  GLF := F$Default( GLFlag, "=", INTEGER, LIB$K_CLI_GLOBAL_SYM );
  ArgStr := Sym + K$pilcrow + Val + K$pilcrow + STR( GLF );
  ResStr := CALL_USER( K$OpCode_Set_Symbol, ArgStr );
ENDPROCEDURE  !P$SETSYMBOL

PROCEDURE F$GETSYMBOL( Sym, GLFlag )
LOCAL ArgStr, ResStr, Val;
ON_ERROR
  MESSAGE( "%F$GETSYMBOL-F-NOSUCHSYM, no such symbol" );
  MESSAGE( FAO( "  symbol: `!AS'", Sym ) );
  P$0; ABORT;
ENDON_ERROR
  IF ( LENGTH( Sym ) > 255 ) THEN
    MESSAGE( "%P$GETSYMBOL-E-SYMTOOLONG, length of symbol name exceeds 255 characters" );
    ABORT;
  ENDIF;
  ! Argument-String: "Symbol"
  ResStr := CALL_USER( K$OpCode_Get_Symbol, Sym );
  ! Result-String: "Value¶GlobalLocalFlag"
  ! (LIB$GET_SYMBOL returns table where if found symbol: Local or Global)
  Val    := F$ELEMENT( 0, K$pilcrow, ResStr );
  GLFlag := INT( F$ELEMENT( 1, K$pilcrow, ResStr ) );
  RETURN( Val );
ENDPROCEDURE  !F$GETSYMBOL


PROCEDURE InsertLineBefore( TarL, NewLn )
LOCAL Pat, Rng, V, Result;
  Result := FALSE;
  Pat := ( LINE_BEGIN + TarL );
  POSITION( BEGINNING_OF( Source_Buffer ) );
  Rng := SEARCH_QUIETLY( Pat, FORWARD, NO_EXACT );
  IF ( GET_INFO( Rng, "TYPE" ) = RANGE ) THEN
    POSITION( BEGINNING_OF( Rng ) );
    COPY_TEXT( NewLn ); SPLIT_LINE;
    Result := TRUE;
  ENDIF;
  RETURN ( Result );
ENDPROCEDURE  !InsertLineBefore

PROCEDURE ReplaceKeyName( OldKN, NewKN, Ctr, KSreq )
LOCAL Pat, Rng, V, EDelim, TLin, Bang, Slash, inComment, Eligible;
  Pat := ( SPAN( G$BDelim ) )
         & ( OldKN @V )                          !delimited-word pattern
         & ( SPAN( G$EDelim ) @EDelim );
  Ctr := 0;
  POSITION( BEGINNING_OF( Source_Buffer ) );
  LOOP
    Rng := SEARCH_QUIETLY( Pat, FORWARD, NO_EXACT );
    EXITIF( Rng = 0 );
    IF ( GET_INFO( V, "TYPE" ) = RANGE ) THEN
      POSITION( V );
      TLin := CURRENT_LINE;
      Bang := INDEX( TLin, "!" );
      inComment := ( Bang > 0 ) AND ( Bang < CURRENT_OFFSET );
      IF KSreq THEN   ! Limit fix-ups to KEYSTROKE commands only...
        EDIT( TLin, UPPER, TRIM, ON, IN_PLACE );       !Is current line
        Eligible := ( SUBSTR( TLin, 1, 4 ) = "KEYS" ); ! a KEYStroke command?
      ELSE Eligible := TRUE;  ! Unrestricted, any RAPT command can be fixed
      ENDIF;
      Slash := ( SUBSTR( EDelim, 1, 1 ) = "/" );
      ! If found-str not "in a comment" and line is eligible, then replace it:
      IF ( Eligible ) AND NOT ( inComment ) THEN
        ERASE( V );
        IF Slash THEN
          COPY_TEXT( NewKN + " " );
        ELSE COPY_TEXT( NewKN );
        ENDIF;
        Ctr := Ctr + 1;
      ELSE MOVE_HORIZONTAL( +1 );  !bump off target-string for next search...
      ENDIF;
    ENDIF;
  ENDLOOP;
ENDPROCEDURE  !ReplaceKeyName

PROCEDURE UsageWarning( TarL )
LOCAL Rng, Here, LNo;
  POSITION( BEGINNING_OF( Source_Buffer ) );
  LOOP
    Rng := SEARCH_QUIETLY( TarL, FORWARD, NO_EXACT );
    EXITIF( Rng = 0 );
    IF ( GET_INFO( Rng, "TYPE" ) = RANGE ) THEN
      POSITION( BEGINNING_OF( Rng ) );
      Here := MARK( NONE );
      LNo  := GET_INFO( Here, "RECORD_NUMBER" );
      MESSAGE( "%FILE$EDIT-W-DEVL_ATTN, RAPT developer attention required ---" );
      MESSAGE( "!24* line !SL, found: [1m!AS[0m", 0, LNo, TarL );
      MOVE_HORIZONTAL( +1 );  !bump off target-string to continue search...
    ENDIF;
  ENDLOOP;
ENDPROCEDURE  !UsageWarning


! Main program

  G$GLTable := 0;  !initialize...

  G$Debug := SUBSTR( F$TranslateLNM( "TOOLS$Debug", NULL ), 1, 1 );
  G$Debug := ( INDEX( "YT1", G$Debug ) > 0 );  !Yes, True or 1?

  G$IFile := GET_INFO( COMMAND_LINE, "FILE_NAME" );
  Source_Buffer := CREATE_BUFFER( "Source", G$IFile );

  G$BDelim := " " + ASCII( 9 ) + ",(";
  G$EDelim := " " + ASCII( 9 ) + ",)-=/";

  ! Attempt to insert "OPTIONS /KEYBOARD=PC" before "DATABASE" stmt.;
  ! if this fails, then try putting one before "SCREEN" stmt.
  G$InsOptions := InsertLineBefore( "DATABASE ", "OPTIONS /KEYBOARD=PC");
  IF NOT( G$InsOptions ) THEN
    G$InsOptions := InsertLineBefore( "SCREEN ", "OPTIONS /KEYBOARD=PC");
  ENDIF;

  G$Ctr    := 0;
  F5$Ctr   := 0;
  F6$Ctr   := 0;
  F7$Ctr   := 0;
  F8$Ctr   := 0;
  F9$Ctr   := 0;
  F10$Ctr  := 0;
  F11$Ctr  := 0;
  F12$Ctr  := 0;
  PgUp$Ctr := 0;
  PgDn$Ctr := 0;
  Home$Ctr := 0;
  End$Ctr  := 0;
  Del$Ctr  := 0;
  Ins$Ctr  := 0;

  IF G$InsOptions THEN
    ! Find/fix these function-key names wherever they occur:
    ReplaceKeyName( "F11",  "F5", F5$Ctr,  FALSE );
    ReplaceKeyName( "F12",  "F6", F6$Ctr,  FALSE );
    ReplaceKeyName( "F13",  "F7", F7$Ctr,  FALSE );
    ReplaceKeyName( "F14",  "F8", F8$Ctr,  FALSE );
    ReplaceKeyName( "F17",  "F9", F9$Ctr,  FALSE );
    ReplaceKeyName( "F18", "F10", F10$Ctr, FALSE );
    ReplaceKeyName( "F19", "F11", F11$Ctr, FALSE );
    ReplaceKeyName( "F20", "F12", F12$Ctr, FALSE );

    ! Find/fix 3 forms of PREVIOUS wherever it occurs:
    ReplaceKeyName( "PREVIOUS", "PGUP", G$Ctr, FALSE );
    PgUp$Ctr := G$Ctr;
    ReplaceKeyName( "PREV",     "PGUP", G$Ctr, FALSE );
    PgUp$Ctr := PgUp$Ctr + G$Ctr;
    ReplaceKeyName( "PRE",      "PGUP", G$Ctr, FALSE );
    PgUp$Ctr := PgUp$Ctr + G$Ctr;

    ! Find/fix 2 forms of NEXT wherever it occurs:
    ReplaceKeyName( "NEXT", "PGDN", G$Ctr, FALSE );
    PgDn$Ctr := G$Ctr;
    ReplaceKeyName( "NEX",  "PGDN", G$Ctr, FALSE );
    PgDn$Ctr := PgDn$Ctr + G$Ctr;

    ! These must be found/fixed only on KEYSTROKE statements,
    !  not elsewhere in RAPT syntax:                   vvvv---restricted
    ReplaceKeyName( "FIND",   "HOME",    Home$Ctr, TRUE );
    ReplaceKeyName( "SELECT", "END",     End$Ctr,  TRUE );
    ReplaceKeyName( "REMOVE", "DELETE",  Del$Ctr,  TRUE );
    ReplaceKeyName( "INSERT", "INSERT",  Ins$Ctr,  TRUE );
    ! And for forms "KEYSTROKE keyname/Qualfier..."
    !  (e.g. "KEYSTROKE FIND/GOLD ..."):
    ReplaceKeyName( "FIND/",   "HOME /",   Home$Ctr, TRUE );
    ReplaceKeyName( "SELECT/", "END /",    End$Ctr,  TRUE );
    ReplaceKeyName( "REMOVE/", "DELETE /", Del$Ctr,  TRUE );
    ReplaceKeyName( "INSERT/", "INSERT /", Ins$Ctr,  TRUE );
  ENDIF;

  IF G$Debug THEN
    MESSAGE( NULL );
    IF NOT( G$InsOptions ) THEN
      MESSAGE( "Failed to insert `OPTIONS /KEYBOARD=PC', file not converted");
    ENDIF;
    IF F5$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `F11' with `F5'", F5$Ctr ) );
    ENDIF;
    IF F6$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `F12' with `F6'", F6$Ctr ) );
    ENDIF;
    IF F7$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `F13' with `F7'", F7$Ctr ) );
    ENDIF;
    IF F8$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `F14' with `F8'", F8$Ctr ) );
    ENDIF;
    IF F9$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `F17' with `F9'", F9$Ctr ) );
    ENDIF;
    IF F10$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `F18' with `F10'", F10$Ctr ) );
    ENDIF;
    IF F11$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `F19' with `F11'", F11$Ctr ) );
    ENDIF;
    IF F12$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `F20' with `F12'", F12$Ctr ) );
    ENDIF;
    IF PgUp$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `PREV' with `PGUP'", PgUp$Ctr ) );
    ENDIF;
    IF PgDn$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `NEXT' with `PGDN'", PgDn$Ctr ) );
    ENDIF;
    IF Home$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `FIND' with `HOME'", Home$Ctr ) );
    ENDIF;
    IF End$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `SELECT' with `END'", End$Ctr ) );
    ENDIF;
    IF Del$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `REMOVE' with `DELETE'", Del$Ctr ) );
    ENDIF;
    IF Ins$Ctr > 0 THEN
      MESSAGE( FAO( "Replaced !ZL instance!%S of `INSERT' with `INSERT'", Ins$Ctr ) );
    ENDIF;
    MESSAGE( FAO( "  in !AS", G$IFile ) );
    MESSAGE( NULL );
  ENDIF;

  ! Emits warning messages if "this syntax" is encountered,
  !  but only if TOOLS$DEBUG is "YES" (i.e., $ TOOLS ON):
  UsageWarning( "KEYSTROKE DO" );
  UsageWarning( "BUCKET " );
  UsageWarning( "/EXPORT=BUCKET" );
  UsageWarning( "/IMPORT=BUCKET" );

  IF GET_INFO( Source_Buffer, "MODIFIED" ) THEN
    WRITE_FILE( Source_Buffer );
    P$SETSYMBOL( "FED$Modified", "TRUE" );
    EXIT;
  ELSE
    P$SETSYMBOL( "FED$Modified", "FALSE" );
    QUIT;
  ENDIF;
