! FILE$EDIT_COPYRIGHT.TPU -- a PlugIn component for FILE$EDIT.COM

! Copyright © 1999-2017 by Lorin Ricker.  All rights reserved, with acceptance,
! use, modification and/or distribution permissions as granted and controlled
! by and under the GPL described herein.
!
! This program (software) is Free Software, licensed under the terms and
! conditions of the GNU General Public License Version 3 as published by
! the Free Software Foundation: http://www.gnu.org/copyleft/gpl.txt,
! which is hereby incorporated into this software and is a non-severable
! part thereof.  You have specific rights and obligations under this GPL
! which are binding if and when you accept, use, modify and/or distribute
! this software program (source code file) and/or derivatives thereof.

!     Version 3.0 - Retire E&R © updates in favor of LockWorks.      01/06/2003
!     Version 2.0 - Added test/fix for "oops" forms.                   01/05/98
!     Version 1.0 - Base release.                                      01/24/97

! ABSTRACT:
! Update copyright notices to "current year".
!
!  "©20xx..."         becomes "© 20xx..."
!  "© 2001-2002 ..."  becomes "© 2001-2003 ..."
!  "© 2000,2001 ..."  becomes "© 2000-2002 ..."
!  "© 2000, 2001 ..." becomes "© 2000-2002 ..."
!  "© 2000 ..."       becomes "© 2000-2001 ..."
!
! Also, certain older forms of E&R's copyright notice get "made regular"
! as per the above actual example.


! === DCL LEXICALS (mimics) === !

CONSTANT
  NULL := "",  !null string

  ! OpCodes for CALL_USER:             ! Related arguments for CALL_USER:
  K$OpCode_EchoCheck     := 0,
  K$OpCode_Define_LNM    := 1,         KED$ExitLNM := "KED$EXIT_INFO",
  K$OpCode_Delete_LNM    := 2,
  K$OpCode_Check_ifQue   := 3,
  K$OpCode_Que_File      := 4,
  K$OpCode_Translate_LNM := 5,
  K$OpCode_Set_Symbol    := 6,
  K$OpCode_Get_Symbol    := 7,

  LIB$K_CLI_LOCAL_SYM    := 1,
  LIB$K_CLI_GLOBAL_SYM   := 2,

  ! Character constants:
  K$tab := ASCII(  9 ),  K$spc       := ASCII(  32 ),
  K$lf  := ASCII( 10 ),  K$dquote    := ASCII(  34 ),  !double quote "
  K$vt  := ASCII( 11 ),  K$squote    := ASCII(  39 ),  !single quote '
  K$ff  := ASCII( 12 ),  K$comma     := ASCII(  44 ),
  K$cr  := ASCII( 13 ),  K$period    := ASCII(  46 ),
  K$so  := ASCII( 14 ),  K$semicolon := ASCII(  59 ),
  K$si  := ASCII( 15 ),  K$csi       := ASCII( 155 ),
  K$esc := ASCII( 27 ),  K$ss3       := ASCII( 143 ),
                         K$pilcrow   := ASCII( 182 )   !"¶"
  ;  !End CONSTANTs


PROCEDURE F$Default( Arg, Op, PTyp, Def )
LOCAL rval;
  CASE SUBSTR( Op, 1, 1 ) FROM "<" TO "u"
    ["U",
     "u"]: IF ( GET_INFO( Arg, "TYPE" ) = UNSPECIFIED ) THEN rval := Def;
           ELSE rval := Arg; ENDIF;
    ["<"]: IF ( GET_INFO( Arg, "TYPE" ) <> PTyp ) THEN rval := Def;
           ELSE rval := Arg; ENDIF;
    ["="]: IF ( GET_INFO( Arg, "TYPE" ) = PTyp ) THEN rval := Arg;
           ELSE rval := Def; ENDIF;
    ENDCASE;
  RETURN( rval );
ENDPROCEDURE  !F$Default

PROCEDURE F$ELEMENT( n, Sep, Strg )
LOCAL i, j, E, S;
  i := -1;
  j := n;
  E := Sep;
  S := Strg + Sep;
  LOOP
    EXITIF ( j < 0 ) OR ( i = 0 );
    i := INDEX( S, Sep );
    IF ( i > 0 ) THEN
      j := j - 1;
      E := SUBSTR( S, 1, i - 1 );
      S := SUBSTR( S, i + 1, LENGTH( S ) - i );
    ENDIF;
    ENDLOOP;
  !distinguish NULL value from "no such element":
  IF ( i = 0 ) THEN E := Sep; ENDIF;
  RETURN( E );
ENDPROCEDURE  !F$ELEMENT

PROCEDURE F$TRNLNM( LNM, Tbl, Idx, MaxIdx )
LOCAL Table, Ndx, ArgStr, ResStr, EqvStr;
ON_ERROR
!  MESSAGE( "%F$TRNLNM-F-NOLOGNAME, no logical name match" );
!  MESSAGE( FAO( "  logical: `!AS'", LNM ) );
!  message( error_text + " at line " + str( error_line ) );
!  P$0; ABORT;
ENDON_ERROR
  ! Argument-String: "Logical¶Table¶Index"
  IF ( GET_INFO( Tbl, "TYPE" ) = STRING ) THEN
    Table := Tbl;
  ELSE Table := NULL;
  ENDIF;
  IF ( GET_INFO( Idx, "TYPE" ) = INTEGER ) THEN
    Ndx := Idx;
  ELSE Ndx := 0;
  ENDIF;
  ArgStr := LNM + K$pilcrow + Table + K$pilcrow + STR( Ndx );
  ResStr := CALL_USER( K$OpCode_Translate_LNM, ArgStr );
  ! Return-String: "EquivStr¶Logical¶TblFoundIn¶Index¶MaxIndex"
  EqvStr := F$ELEMENT( 0, K$pilcrow, ResStr );
  Lnm    := F$ELEMENT( 1, K$pilcrow, ResStr );
  Tbl    := F$ELEMENT( 2, K$pilcrow, ResStr );
  !Idx & MaxIdx are returned as strings...
  !  caller should convert to INT() only if needed
  Idx    := F$ELEMENT( 3, K$pilcrow, ResStr );
  MaxIdx := F$ELEMENT( 4, K$pilcrow, ResStr );
  RETURN( EqvStr );
ENDPROCEDURE  !F$TRNLNM

PROCEDURE F$TranslateLNM( LNM, DefVal; Table, Ndx )
LOCAL Val, Tmp, Tbl, Idx, MaxIdx;
ON_ERROR
ENDON_ERROR
  Tmp := LNM;   !If parameter LNM is "LiteralString", need this Tmp assignment!
  Tbl := F$Default( Table, "=", STRING, NULL );
  Idx := F$Default( Ndx,   "=", INTEGER, 0 );
  Val := F$TRNLNM( Tmp, Tbl, Idx, MaxIdx );
  IF ( Val = NULL ) THEN
    Val := DefVal;     !give back the default if the translation fails
  ENDIF;
  RETURN( Val );
ENDPROCEDURE  !F$TranslateLNM

PROCEDURE P$SETSYMBOL( Sym, Val; GLFlag )
LOCAL GLF, ArgStr, ResStr;
ON_ERROR
  MESSAGE( "%F$SETSYMBOL-F-SETFAIL, failed to set symbol" );
  MESSAGE( FAO( "  symbol: `!AS'", Sym ) );
  P$0; ABORT;
ENDON_ERROR
  IF ( LENGTH( Sym ) > 255 ) THEN
    MESSAGE( "%P$SETSYMBOL-E-SYMTOOLONG, length of symbol name exceeds 255 characters" );
    ABORT;
  ENDIF;
  IF ( LENGTH( Val ) > 255 ) THEN
    MESSAGE( "%P$SETSYMBOL-E-VALTOOLONG, symbol's value exceeds 255 characters" );
    ABORT;
  ENDIF;
  ! Argument-String: "Symbol¶Value¶GlobalLocalFlag"
  GLF := F$Default( GLFlag, "=", INTEGER, LIB$K_CLI_GLOBAL_SYM );
  ArgStr := Sym + K$pilcrow + Val + K$pilcrow + STR( GLF );
  ResStr := CALL_USER( K$OpCode_Set_Symbol, ArgStr );
ENDPROCEDURE  !P$SETSYMBOL

PROCEDURE F$GETSYMBOL( Sym, GLFlag )
LOCAL ArgStr, ResStr, Val;
ON_ERROR
  MESSAGE( "%F$GETSYMBOL-F-NOSUCHSYM, no such symbol" );
  MESSAGE( FAO( "  symbol: `!AS'", Sym ) );
  P$0; ABORT;
ENDON_ERROR
  IF ( LENGTH( Sym ) > 255 ) THEN
    MESSAGE( "%P$GETSYMBOL-E-SYMTOOLONG, length of symbol name exceeds 255 characters" );
    ABORT;
  ENDIF;
  ! Argument-String: "Symbol"
  ResStr := CALL_USER( K$OpCode_Get_Symbol, Sym );
  ! Result-String: "Value¶GlobalLocalFlag"
  ! (LIB$GET_SYMBOL returns table where if found symbol: Local or Global)
  Val    := F$ELEMENT( 0, K$pilcrow, ResStr );
  GLFlag := INT( F$ELEMENT( 1, K$pilcrow, ResStr ) );
  RETURN( Val );
ENDPROCEDURE  !F$GETSYMBOL


PROCEDURE F$Replace( Pat, RTxt, Adj )
LOCAL a;
  POSITION( BEGINNING_OF( Source_Buffer ) );
  G$V2 := 0;
  LOOP
    G$Rng := SEARCH_QUIETLY( Pat, FORWARD, NO_EXACT );
    EXITIF ( G$Rng = 0 );
    POSITION( BEGINNING_OF( G$V1 ) );
    IF G$Debug THEN MESSAGE( CURRENT_LINE ); ENDIF;                   !old
    ERASE( G$V1 );
    COPY_TEXT( RTxt );
    IF ( GET_INFO( G$V2, "TYPE" ) = RANGE ) THEN  ! Handle trailing "   }"
      POSITION( BEGINNING_OF( G$V2 ) );           ! (EOL comment mark spacing)
      d := -Adj;
      a := LENGTH( G$V2 );
      IF ( d <= a ) THEN a := d; ELSE a := a - 1; ENDIF;
      CASE Adj FROM -3 TO +3
        [-3,
         -2,
         -1]: IF ( a > 0 ) THEN ERASE_CHARACTER( a ); ENDIF;
        [ 0]: ;   !null-stmt
        [ 1,
          2,
          3]: COPY_TEXT( " " * Adj );   ! 1, 2 or 3 spaces
        ENDCASE;
    ENDIF;
    IF G$Debug THEN MESSAGE( "[1m" + CURRENT_LINE + "[0m" ); ENDIF; !new
    ENDLOOP;
ENDPROCEDURE  !F$Replace


! Main program

  G$GLTable := 0;  !initialize...

  G$Debug := SUBSTR( F$TranslateLNM( "TOOLS$Debug", NULL ), 1, 1 );
  G$Debug := ( INDEX( "YT1", G$Debug ) > 0 );  !Yes, True or 1?
  G$Year  := F$GETSYMBOL( "FED$Year", G$GLTable );

  G$Num   := "0123456789";
  G$Alpha := "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  G$WS    := " " + ASCII(9);

  G$V1   := 0;
  G$V2   := 0;
  G$Rng1 := 0;
  G$Rng2 := 0;

  G$IFile := GET_INFO( COMMAND_LINE, "FILE_NAME" );
  Source_Buffer := CREATE_BUFFER( "Source", G$IFile );

  ! "©2000" (i.e., no space after ©)
  G$Oop1 := " ©" + SPAN( G$Num );
  ! "© 2000, 2001" (convert comma-form into "2000-2001")
  G$Oop2 := " © " + ( SPAN( G$Num ) + ( SPAN( ", " )@G$V2 ) + SPAN( G$Num ) ) + " ";

  ! "© 2000 "
  G$Pat1 := " © " + ( SPAN( G$Num )@G$V1 ) + " ";
  ! "© 2000-2001 "
  G$Pat2 := " © " + SPAN( G$Num ) + "-" + ( SPAN( G$Num )@G$V2 ) + " ";

  G$StrER := "Evans & Ricker, Inc.";

  G$Bad1  := ( ("This program is the confidential and proprietary product")@G$V1 )
           + ( LINE_END | ( SPAN( G$WS ) + NOTANY( G$Alpha + G$Num ) )@G$V2 );
  G$Bad2  := ( ("of Evans & Ricker, Inc.  Any unauthorized use, reproduction")@G$V1 )
           + ( LINE_END | ( SPAN( G$WS ) + NOTANY( G$Alpha + G$Num ) )@G$V2 );
  G$Bad3  := ( ("or transfer of this program is strictly prohibited.")@G$V1 )
           + ( LINE_END | ( SPAN( G$WS ) + NOTANY( G$Alpha + G$Num ) )@G$V2 );
  G$Bad4  := ( (". All rights reserved.")@G$V1 )
           + ( LINE_END | ( SPAN( G$WS ) + NOTANY( G$Alpha + G$Num ) )@G$V2 );

  G$Good1 := "This program is the confidential and proprietary product of";
  G$Good2 := "Evans & Ricker, Inc.  Any unauthorized use, reproduction or";
  G$Good3 := "transfer of this program is strictly prohibited.";
  G$Good4 := ".  All rights reserved.";

  F$Replace( G$Bad1, G$Good1, -3 );
  F$Replace( G$Bad2, G$Good2,  0 );
  F$Replace( G$Bad3, G$Good3, +3 );
  F$Replace( G$Bad4, G$Good4, -1 );

  ! Find any "©20xx" and put a space after "©":
  POSITION( BEGINNING_OF( Source_Buffer ) );
  LOOP
    G$Rng1 := SEARCH_QUIETLY( G$Oop1, FORWARD, NO_EXACT );
    IF ( G$Rng1 <> 0 ) THEN
      POSITION( BEGINNING_OF( G$Rng1 ) );
      IF G$Debug THEN MESSAGE( CURRENT_LINE ); ENDIF;                   !old
      MOVE_HORIZONTAL( +2 );
      COPY_TEXT( " " );
      IF G$Debug THEN MESSAGE( "[1m" + CURRENT_LINE + "[0m" ); ENDIF; !new
    ENDIF;
    EXITIF ( G$Rng1 = 0 );
    ENDLOOP;

  ! Convert "20xx, 20yy" into "20xx-20yy":
  POSITION( BEGINNING_OF( Source_Buffer ) );
  LOOP
    G$Rng2 := SEARCH_QUIETLY( G$Oop2, FORWARD, NO_EXACT );
    IF ( G$Rng2 <> 0 ) THEN
      POSITION( BEGINNING_OF( G$V2 ) );
      IF G$Debug THEN MESSAGE( CURRENT_LINE ); ENDIF;                   !old
      ERASE( G$V2 );
      COPY_TEXT( "-" );
      IF G$Debug THEN MESSAGE( "[1m" + CURRENT_LINE + "[0m" ); ENDIF; !new
    ENDIF;
    EXITIF ( G$Rng2 = 0 );
    ENDLOOP;

  ! Update the copyright date-year:
  POSITION( BEGINNING_OF( Source_Buffer ) );
  LOOP
    G$Rng2 := SEARCH_QUIETLY( G$Pat2, FORWARD, NO_EXACT );
    IF ( G$Rng2 <> 0 ) THEN
      POSITION( BEGINNING_OF( G$V2 ) );
      ! But don't update the line if it contains "E&R, Inc.":
      IF ( INDEX( CURRENT_LINE, G$StrER ) = 0 ) THEN
        IF G$Debug THEN MESSAGE( CURRENT_LINE ); ENDIF;                   !old
        ERASE( G$V2 );
        COPY_TEXT( G$Year );
        IF G$Debug THEN MESSAGE( "[1m" + CURRENT_LINE + "[0m" ); ENDIF; !new
      ENDIF;
    ENDIF;
    EXITIF ( G$Rng2 = 0 );
    ENDLOOP;

  POSITION( BEGINNING_OF( Source_Buffer ) );
  LOOP
    G$Rng1 := SEARCH_QUIETLY( G$Pat1, FORWARD, NO_EXACT );
    IF ( G$Rng1 <> 0 ) THEN
      POSITION( END_OF( G$V1 ) ); MOVE_HORIZONTAL( +1 );
      ! But don't update the line if it contains "E&R, Inc.":
      IF ( INDEX( CURRENT_LINE, G$StrER ) = 0 ) THEN
        IF G$Debug THEN MESSAGE( CURRENT_LINE ); ENDIF;                   !old
        COPY_TEXT( "-" + G$Year );
        IF G$Debug THEN MESSAGE( "[1m" + CURRENT_LINE + "[0m" ); ENDIF; !new
      ENDIF;
    ENDIF;
    EXITIF ( G$Rng1 = 0 );
    ENDLOOP;

  IF GET_INFO( Source_Buffer, "MODIFIED" ) THEN
    WRITE_FILE( Source_Buffer );
    P$SETSYMBOL( "FED$Modified", "TRUE" );
    EXIT;
  ELSE
    P$SETSYMBOL( "FED$Modified", "FALSE" );
    QUIT;
  ENDIF;
